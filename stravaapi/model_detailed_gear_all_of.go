/*
Strava API v3

The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stravaapi

import (
	"encoding/json"
)

// checks if the DetailedGearAllOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DetailedGearAllOf{}

// DetailedGearAllOf struct for DetailedGearAllOf
type DetailedGearAllOf struct {
	// The gear's brand name.
	BrandName *string `json:"brand_name,omitempty"`
	// The gear's model name.
	ModelName *string `json:"model_name,omitempty"`
	// The gear's frame type (bike only).
	FrameType *int32 `json:"frame_type,omitempty"`
	// The gear's description.
	Description *string `json:"description,omitempty"`
}

// NewDetailedGearAllOf instantiates a new DetailedGearAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDetailedGearAllOf() *DetailedGearAllOf {
	this := DetailedGearAllOf{}
	return &this
}

// NewDetailedGearAllOfWithDefaults instantiates a new DetailedGearAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDetailedGearAllOfWithDefaults() *DetailedGearAllOf {
	this := DetailedGearAllOf{}
	return &this
}

// GetBrandName returns the BrandName field value if set, zero value otherwise.
func (o *DetailedGearAllOf) GetBrandName() string {
	if o == nil || IsNil(o.BrandName) {
		var ret string
		return ret
	}
	return *o.BrandName
}

// GetBrandNameOk returns a tuple with the BrandName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailedGearAllOf) GetBrandNameOk() (*string, bool) {
	if o == nil || IsNil(o.BrandName) {
		return nil, false
	}
	return o.BrandName, true
}

// HasBrandName returns a boolean if a field has been set.
func (o *DetailedGearAllOf) HasBrandName() bool {
	if o != nil && !IsNil(o.BrandName) {
		return true
	}

	return false
}

// SetBrandName gets a reference to the given string and assigns it to the BrandName field.
func (o *DetailedGearAllOf) SetBrandName(v string) {
	o.BrandName = &v
}

// GetModelName returns the ModelName field value if set, zero value otherwise.
func (o *DetailedGearAllOf) GetModelName() string {
	if o == nil || IsNil(o.ModelName) {
		var ret string
		return ret
	}
	return *o.ModelName
}

// GetModelNameOk returns a tuple with the ModelName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailedGearAllOf) GetModelNameOk() (*string, bool) {
	if o == nil || IsNil(o.ModelName) {
		return nil, false
	}
	return o.ModelName, true
}

// HasModelName returns a boolean if a field has been set.
func (o *DetailedGearAllOf) HasModelName() bool {
	if o != nil && !IsNil(o.ModelName) {
		return true
	}

	return false
}

// SetModelName gets a reference to the given string and assigns it to the ModelName field.
func (o *DetailedGearAllOf) SetModelName(v string) {
	o.ModelName = &v
}

// GetFrameType returns the FrameType field value if set, zero value otherwise.
func (o *DetailedGearAllOf) GetFrameType() int32 {
	if o == nil || IsNil(o.FrameType) {
		var ret int32
		return ret
	}
	return *o.FrameType
}

// GetFrameTypeOk returns a tuple with the FrameType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailedGearAllOf) GetFrameTypeOk() (*int32, bool) {
	if o == nil || IsNil(o.FrameType) {
		return nil, false
	}
	return o.FrameType, true
}

// HasFrameType returns a boolean if a field has been set.
func (o *DetailedGearAllOf) HasFrameType() bool {
	if o != nil && !IsNil(o.FrameType) {
		return true
	}

	return false
}

// SetFrameType gets a reference to the given int32 and assigns it to the FrameType field.
func (o *DetailedGearAllOf) SetFrameType(v int32) {
	o.FrameType = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *DetailedGearAllOf) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailedGearAllOf) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *DetailedGearAllOf) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *DetailedGearAllOf) SetDescription(v string) {
	o.Description = &v
}

func (o DetailedGearAllOf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DetailedGearAllOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BrandName) {
		toSerialize["brand_name"] = o.BrandName
	}
	if !IsNil(o.ModelName) {
		toSerialize["model_name"] = o.ModelName
	}
	if !IsNil(o.FrameType) {
		toSerialize["frame_type"] = o.FrameType
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	return toSerialize, nil
}

type NullableDetailedGearAllOf struct {
	value *DetailedGearAllOf
	isSet bool
}

func (v NullableDetailedGearAllOf) Get() *DetailedGearAllOf {
	return v.value
}

func (v *NullableDetailedGearAllOf) Set(val *DetailedGearAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableDetailedGearAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableDetailedGearAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDetailedGearAllOf(val *DetailedGearAllOf) *NullableDetailedGearAllOf {
	return &NullableDetailedGearAllOf{value: val, isSet: true}
}

func (v NullableDetailedGearAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDetailedGearAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


